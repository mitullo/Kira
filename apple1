-- Whitelist system
local whitelistedUsers = {
    ["7013620082"] = true, -- Replace with actual UserIDs
    ["0"] = true,
    ["0"] = true, -- Example UserID
    -- Add more whitelisted users here
}

-- Check if player is whitelisted
local function checkWhitelist()
    local plr = game:GetService("Players").LocalPlayer
    if not whitelistedUsers[tostring(plr.UserId)] then
        plr:Kick("You are not whitelisted to use this script.")
        return false
    end
    return true
end

-- Execute script only if whitelisted
if not checkWhitelist() then return end

local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/discoart/FluentPlus/refs/heads/main/release.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

-- Cache frequently accessed services 
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Lighting = game:GetService("Lighting")
local LocalPlayer = Players.LocalPlayer
local Camera = workspace.CurrentCamera

-- Cache for optimization
local Cache = {
    prompts = {},
    appleLabels = {},
    lastUpdate = 0,
    lastAppleTime = 0,
    lastWorkspaceAppleCheck = 0
}

local Window = Fluent:CreateWindow({
    Title = "Apple Hub " .. Fluent.Version,
    SubTitle = "by someone",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "apple" }),
    PlayersESP = Window:AddTab({ Title = "Players ESP", Icon = "eye" }),
    OtherFeatures = Window:AddTab({ Title = "Other Features", Icon = "boxes" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Initialize SaveManager and InterfaceManager
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

-- ESP UI Elements
local ESPEnabled = Tabs.PlayersESP:AddToggle("ESPEnabled", {Title = "Enable ESP", Default = false})
local ESPColor = Tabs.PlayersESP:AddColorpicker("ESPColor", {Title = "ESP Color", Default = Color3.fromRGB(255, 0, 0)})
local ESPFillTransparency = Tabs.PlayersESP:AddSlider("ESPFillTransparency", {Title = "Fill Transparency", Min = 0, Max = 1, Default = 0.5, Rounding = 2})
local ESPOutlineTransparency = Tabs.PlayersESP:AddSlider("ESPOutlineTransparency", {Title = "Outline Transparency", Min = 0, Max = 1, Default = 0.5, Rounding = 2})
local ESPDisplayName = Tabs.PlayersESP:AddToggle("ESPDisplayName", {Title = "Display Name", Default = true})
local ESPTextColor = Tabs.PlayersESP:AddColorpicker("ESPTextColor", {Title = "Text Color", Default = Color3.fromRGB(255, 255, 255)})
local ESPTextSize = Tabs.PlayersESP:AddSlider("ESPTextSize", {Title = "Text Size", Min = 10, Max = 50, Default = 20, Rounding = 0})
local XRayEnabled = Tabs.PlayersESP:AddToggle("XRayEnabled", {Title = "Enable XRay", Default = false})
local XRayTransparency = Tabs.PlayersESP:AddSlider("XRayTransparency", {Title = "XRay Transparency", Min = 0, Max = 1, Default = 0.5, Rounding = 2})

-- Kira Notifier UI elements
local kiraList = Tabs.Main:AddDropdown("KiraList", {
    Title = "Identified Kiras",
    Values = {},
    Multi = false,
    Default = nil
})

Tabs.Main:AddParagraph({
    Title = "Kira Notifier",
    Content = "This notifier will alert you when a player has a DeathNoteBook."
})

-- Function to clear Kira list
local function clearKiraList()
    kiraList:SetValues({})
    print("Cleared Kira list - Intermission detected")
end

-- Function to check for intermission
local function checkIntermission()
    local player = Players.LocalPlayer.PlayerGui
    if player and player:FindFirstChild("GameUI") then
        local titleLabel = player.GameUI.TopFrame.GPTitle.TextLabel
        if titleLabel and titleLabel.Text == "INTERMISSION" then
            clearKiraList()
        end
    end
end

-- Set up intermission check
RunService.Heartbeat:Connect(checkIntermission)

-- Add after line 98 (after the RunService.Heartbeat:Connect(checkIntermission) line)

-- Optimize main update loop
local lastUpdate = 0
RunService.Heartbeat:Connect(function()
    local currentTime = tick()
    
    -- Only update every 1 second
    if currentTime - lastUpdate < 1 then return end
    lastUpdate = currentTime
    
    -- Cache workspace check
    local workspaceMap = workspace:FindFirstChild("Map")
    
    -- Optimize apple checks
    if AutoApple.Value and currentTime - Cache.lastAppleTime >= 301 then
        Cache.lastAppleTime = currentTime
        collectApple()
    end
    
    if WorkspaceAppleFarm.Value and workspaceMap then
        collectWorkspaceApple()
    end
end)

RunService.Heartbeat:Connect(mainUpdate)

--- Add after the Kira Notifier UI elements in the Main tab
local AutoApple = Tabs.Main:AddToggle("AutoApple", {
    Title = "Lobby Apple Farm",
    Default = false
})

-- Add the Apple farming functions with error handling
local function collectApple()
    local apple = workspace:FindFirstChild("Obby_Lobby"):FindFirstChild("Apple")
    if apple and Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        pcall(function()
            local humanoidRootPart = Players.LocalPlayer.Character.HumanoidRootPart
            local originalPosition = humanoidRootPart.CFrame
            humanoidRootPart.CFrame = apple.CFrame
            task.wait(0.5) -- Wait for collection
            humanoidRootPart.CFrame = originalPosition
        end)
    end
end

-- Setup Apple farming loop with better timing
local lastAppleTime = 0
RunService.Heartbeat:Connect(function()
    if not Options.AutoApple.Value then return end
    
    local currentTime = tick()
    if currentTime - lastAppleTime >= 301 then
        lastAppleTime = currentTime
        collectApple()
    end
end)

-- ESP Functionality
local function createESP(player)
    if not player.Character then return end
    
    -- Remove existing highlight if any
    local existingHighlight = player.Character:FindFirstChild("ESPHighlight")
    if existingHighlight then existingHighlight:Destroy() end
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "ESPHighlight"
    highlight.Adornee = player.Character
    highlight.Parent = player.Character
    highlight.FillTransparency = Options.ESPFillTransparency.Value
    highlight.OutlineTransparency = Options.ESPOutlineTransparency.Value
    highlight.FillColor = Options.ESPColor.Value
    highlight.OutlineColor = Options.ESPColor.Value
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
end

local function createBillboard(player)
    if not player.Character then return end
    
    -- Remove existing billboard if any
    local existingBillboard = player.Character:FindFirstChild("ESPBillboard")
    if existingBillboard then existingBillboard:Destroy() end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESPBillboard"
    billboard.Adornee = player.Character:WaitForChild("Head")
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true

    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = billboard
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = player.DisplayName
    textLabel.TextColor3 = Options.ESPTextColor.Value
    textLabel.TextScaled = false
    textLabel.TextSize = Options.ESPTextSize.Value

    billboard.Parent = player.Character
end

-- Optimize ESP updates
local function updateESP()
    if not Options.ESPEnabled.Value then return end
    
    local currentPlayers = Players:GetPlayers()
    for _, player in ipairs(currentPlayers) do
        if player ~= LocalPlayer and player.Character then
            local highlight = player.Character:FindFirstChild("ESPHighlight")
            if not highlight then
                createESP(player)
            end
        end
    end
end

-- Reduce update frequency
RunService.Heartbeat:Connect(function()
    task.wait(0.5) -- Update every 0.5 seconds instead of every frame
    updateESP()
end)

-- Replace the existing setXRay function
    local function setXRay(enabled)
        local transparency = enabled and Options.XRayTransparency.Value or 0
        for _, part in pairs(workspace:GetDescendants()) do
            if part:IsA("BasePart") then
                -- Skip player characters without using continue
                if not part.Parent:FindFirstChild("Humanoid") then
                    part.LocalTransparencyModifier = transparency
                end
            end
        end
    end

local function setupXRayMonitoring()
    workspace.DescendantAdded:Connect(function(part)
        if part:IsA("BasePart") and Options.XRayEnabled.Value then
            if part.Parent:FindFirstChild("Humanoid") then return end
            part.LocalTransparencyModifier = Options.XRayTransparency.Value
        end
    end)
end

-- Add after existing ESP UI Elements
local WorkspaceAppleFarm = Tabs.Main:AddToggle("WorkspaceAppleFarm", {Title = "Game Apple Farm", Default = false})
local WorkspaceAppleESP = Tabs.Main:AddToggle("WorkspaceAppleESP", {Title = "Apple ESP", Default = false})

-- Add after your existing functions
local function createAppleESP(apple)
    if not apple then return end
    
    -- Remove existing highlight if any
    local existingHighlight = apple:FindFirstChild("AppleHighlight")
    if existingHighlight then existingHighlight:Destroy() end
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "AppleHighlight"
    highlight.Adornee = apple
    highlight.Parent = apple
    highlight.FillColor = Color3.fromRGB(255, 215, 0) -- Gold color
    highlight.OutlineColor = Color3.fromRGB(255, 215, 0)
    highlight.FillTransparency = 0
    highlight.OutlineTransparency = 0
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
end

local function collectWorkspaceApple()
    local Map = workspace:FindFirstChild("Map")
    if not Map then return end
    
    for _, apple in pairs(Map:GetChildren()) do
        if apple.Name == "Apple" then
            if Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                pcall(function()
                    local humanoidRootPart = Players.LocalPlayer.Character.HumanoidRootPart
                    local originalPosition = humanoidRootPart.CFrame
                    humanoidRootPart.CFrame = apple.CFrame
                    task.wait(0.5) -- Wait for collection
                    humanoidRootPart.CFrame = originalPosition
                end)
            end
        end
    end
end

-- Add Apple ESP monitoring
local function setupAppleESP()
    local Map = workspace:FindFirstChild("Map")
    if not Map then return end
    
    -- Initial check for existing apples
    for _, apple in pairs(Map:GetChildren()) do
        if apple.Name == "Apple" then
            if Options.WorkspaceAppleESP.Value then
                createAppleESP(apple)
            end
        end
    end
    
    -- Monitor for new apples
    Map.ChildAdded:Connect(function(child)
        if child.Name == "Apple" and Options.WorkspaceAppleESP.Value then
            createAppleESP(child)
        end
    end)

    -- Monitor for removed apples
    Map.ChildRemoved:Connect(function(child)
        if child.Name == "Apple" then
            local highlight = child:FindFirstChild("AppleHighlight")
            if highlight then
                highlight:Destroy()
            end
        end
    end)
end  -- Add this end statement

-- Add continuous ESP update check
RunService.Heartbeat:Connect(function()
    if Options.WorkspaceAppleESP.Value then
        local Map = workspace:FindFirstChild("Map")
        if not Map then return end
        
        for _, apple in pairs(Map:GetChildren()) do
            if apple.Name == "Apple" then
                if not apple:FindFirstChild("AppleHighlight") then
                    createAppleESP(apple)
                end
            end
        end
    end
end)

-- Optimize Apple ESP
local function updateAppleESP()
    if not Options.WorkspaceAppleESP.Value then return end
    
    local Map = workspace:FindFirstChild("Map")
    if not Map then return end
    
    -- Use table to track apples
    local appleCache = {}
    for _, apple in ipairs(Map:GetChildren()) do
        if apple.Name == "Apple" then
            appleCache[apple] = true
            if not apple:FindFirstChild("AppleHighlight") then
                createAppleESP(apple)
            end
        end
    end
end

-- Reduce update frequency
RunService.Heartbeat:Connect(function()
    task.wait(0.25) -- Update 4 times per second
    updateAppleESP()
end)

-- Add these callbacks
Options.WorkspaceAppleESP:OnChanged(function()
    local Map = workspace:FindFirstChild("Map")
    if not Map then return end
    
    if Options.WorkspaceAppleESP.Value then
        setupAppleESP()
    else
        for _, apple in pairs(Map:GetChildren()) do
            if apple.Name == "Apple" then
                local highlight = apple:FindFirstChild("AppleHighlight")
                if highlight then highlight:Destroy() end
            end
        end
    end
end)

-- Setup Workspace Apple farming loop
local lastWorkspaceAppleCheck = 0
RunService.Heartbeat:Connect(function()
    if not Options.WorkspaceAppleFarm.Value then return end
    
    local currentTime = tick()
    if currentTime - lastWorkspaceAppleCheck >= 1 then -- Check every second
        lastWorkspaceAppleCheck = currentTime
        collectWorkspaceApple()
    end
end)

-- Initialize Apple ESP
setupAppleESP()

-- Add after your UI elements in Main tab
local FindDeathNote = Tabs.Main:AddToggle("FindDeathNote", {
    Title = "Auto Find DeathNote",
    Default = false
})

-- Add after your existing functions
local function instantInteract(prompt)
    if prompt.HoldDuration > 0 then
        prompt.HoldDuration = 0
    end
    fireproximityprompt(prompt)
end

-- Update the DeathNote search function and its loop
local lastSearchedIndex = 0

-- Update the DeathNote search function to stay longer at crates
local function searchDeathNote()
    if not Options.FindDeathNote.Value then 
        lastSearchedIndex = 0
        return 
    end
    
    local crates = {}
    -- Collect all valid crates from entire workspace
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj.Name == "Crate" and obj:FindFirstChild("BinPrompt") then
            table.insert(crates, obj)
        end
    end
    
    if #crates == 0 then return end

    -- Move to next crate index
    lastSearchedIndex = lastSearchedIndex + 1
    if lastSearchedIndex > #crates then
        lastSearchedIndex = 1
    end
    
    local currentCrate = crates[lastSearchedIndex]
    if currentCrate and Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = Players.LocalPlayer.Character.HumanoidRootPart
        local originalPosition = humanoidRootPart.CFrame
        
        -- Teleport to crate and wait longer
        humanoidRootPart.CFrame = currentCrate.CFrame
        task.wait(0.5) -- Wait for auto clicker to register
        
        -- Interact with prompt
        local prompt = currentCrate.BinPrompt
        instantInteract(prompt)
        
        task.wait(0.1) -- Wait briefly after interaction
        
        -- Return to original position
        humanoidRootPart.CFrame = originalPosition
    end

    -- Wait before searching next crate
    task.wait(2)
    searchDeathNote()
end

-- Add DeathNote search loop
RunService.Heartbeat:Connect(function()
    if Options.FindDeathNote.Value and lastSearchedIndex == 0 then
        searchDeathNote()
    end
end)

RunService.Heartbeat:Connect(optimizedSearchDeathNote)

-- Add after your UI elements in Main tab
local InstantTakeIDs = Tabs.Main:AddToggle("InstantTakeIDs", {
    Title = "Instant Take IDs",
    Default = false
})

local BiggerIDRange = Tabs.Main:AddToggle("BiggerIDRange", {
    Title = "Bigger ID Taking Range",
    Default = false
})

-- Replace the existing prompt handling code with this fixed version
local idPromptCache = {}

-- Function to update a single prompt
local function updatePrompt(prompt)
    if not prompt or not prompt.Parent then return end
    
    if prompt:IsA("ProximityPrompt") and prompt.Name == "IdPrompt" then
        -- Update properties directly
        prompt.HoldDuration = InstantTakeIDs.Value and 0 or 3
        prompt.MaxActivationDistance = BiggerIDRange.Value and 20 or 10
        prompt.RequiresLineOfSight = false
    end
end

-- Function to find and cache all ID prompts
local function findAllPrompts()
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("ProximityPrompt") and obj.Name == "IdPrompt" then
            idPromptCache[obj] = true
            updatePrompt(obj)
        end
    end
end

-- Monitor for new prompts
workspace.DescendantAdded:Connect(function(obj)
    if obj:IsA("ProximityPrompt") and obj.Name == "IdPrompt" then
        idPromptCache[obj] = true
        updatePrompt(obj)
    end
end)

workspace.DescendantRemoving:Connect(function(obj)
    if obj:IsA("ProximityPrompt") and obj.Name == "IdPrompt" then
        idPromptCache[obj] = nil
    end
end)

-- Handle toggle changes immediately
Options.InstantTakeIDs:OnChanged(function()
    for prompt, _ in pairs(idPromptCache) do
        if prompt and prompt.Parent then
            updatePrompt(prompt)
        else
            idPromptCache[prompt] = nil
        end
    end
end)

Options.BiggerIDRange:OnChanged(function()
    for prompt, _ in pairs(idPromptCache) do
        if prompt and prompt.Parent then
            updatePrompt(prompt)
        else
            idPromptCache[prompt] = nil
        end
    end
end)

-- Update prompts continuously
RunService.Heartbeat:Connect(function()
    for prompt, _ in pairs(idPromptCache) do
        if prompt and prompt.Parent then
            updatePrompt(prompt)
        else
            idPromptCache[prompt] = nil
        end
    end
end)

-- Initial setup
findAllPrompts()

-- More frequent updates
RunService.Heartbeat:Connect(updateCachedPrompts)

-- Add after your ESP UI Elements in Main tab
local AllIDsESP = Tabs.Main:AddToggle("AllIDsESP", {
    Title = "Show All IDs ESP",
    Default = false
})

local YourIDESP = Tabs.Main:AddToggle("YourIDESP", {
    Title = "Show Your ID ESP",
    Default = false
})

-- Replace the existing ID ESP code with this optimized version
local idESPCache = {}

local function updateIDESP()
    local Map = workspace:FindFirstChild("Map")
    if not Map then return end
    
    local isEnabled = Options.AllIDsESP.Value or Options.YourIDESP.Value
    local localPlayerName = Players.LocalPlayer.Name
    
    -- Clean up if disabled
    if not isEnabled then
        for id, highlight in pairs(idESPCache) do
            if highlight and highlight.Parent then
                highlight:Destroy()
                if id:IsA("BasePart") then
                    id.Transparency = 1
                end
                local gui = id:FindFirstChild("SurfaceGui")
                if gui then
                    gui.AlwaysOnTop = false
                    gui.LightInfluence = 1
                end
            end
        end
        idESPCache = {}
        return
    end
    
    -- Track and update valid IDs
    local validIDs = {}
    for _, id in ipairs(Map:GetChildren()) do
        if id.Name == "Id" then
            local surfaceGui = id:FindFirstChild("SurfaceGui")
            local idPrompt = id:FindFirstChild("IdPrompt")
            
            if surfaceGui and idPrompt and surfaceGui.Enabled and idPrompt.Enabled then
                local playerName = idPrompt:GetAttribute("PlayerName")
                if playerName and (Options.AllIDsESP.Value or (Options.YourIDESP.Value and playerName == localPlayerName)) then
                    validIDs[id] = true
                    
                    -- Update or create highlight
                    local highlight = idESPCache[id]
                    if not highlight or not highlight.Parent then
                        highlight = Instance.new("Highlight")
                        highlight.Name = "IDHighlight"
                        highlight.Adornee = id
                        highlight.Parent = id
                        highlight.FillTransparency = 0.5
                        highlight.OutlineTransparency = 0
                        highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                        idESPCache[id] = highlight
                    end
                    
                    -- Update properties
                    id.Transparency = 0
                    surfaceGui.AlwaysOnTop = true
                    surfaceGui.LightInfluence = 0
                    
                    -- Update colors
                    highlight.FillColor = playerName == localPlayerName and Color3.fromRGB(0, 255, 0) or Color3.fromRGB(255, 255, 255)
                    highlight.OutlineColor = highlight.FillColor
                end
            end
        end
    end
    
    -- Remove invalid highlights
    for id, highlight in pairs(idESPCache) do
        if not validIDs[id] then
            if highlight and highlight.Parent then
                highlight:Destroy()
            end
            idESPCache[id] = nil
            
            if id:IsA("BasePart") then
                id.Transparency = 1
            end
            local gui = id:FindFirstChild("SurfaceGui")
            if gui then
                gui.AlwaysOnTop = false
                gui.LightInfluence = 1
            end
        end
    end
end

-- Single connection using RenderStepped
local espConnection
local function setupESPConnection()
    if espConnection then
        espConnection:Disconnect()
        espConnection = nil
    end
    
    if Options.AllIDsESP.Value or Options.YourIDESP.Value then
        espConnection = RunService.RenderStepped:Connect(updateIDESP)
    end
end

-- Handle toggle changes
Options.AllIDsESP:OnChanged(setupESPConnection)
Options.YourIDESP:OnChanged(setupESPConnection)

-- Clean up on disable
local function cleanupESP()
    for id, highlight in pairs(idESPCache) do
        if highlight and highlight.Parent then
            highlight:Destroy()
        end
    end
    idESPCache = {}
end

-- Handle round changes
game.Players.LocalPlayer.PlayerGui.ChildAdded:Connect(function(child)
    if child.Name == "GameUI" then
        cleanupESP()
        setupESPConnection()
    end
end)

-- Initial setup
setupESPConnection()

-- Replace the existing TeleportToID button with this updated version
-- Update TeleportToID function
local TeleportToID = Tabs.Main:AddButton({
    Title = "Teleport to Your ID",
    Description = "Teleports you in front of your ID",
    Callback = function()
        local playerName = Players.LocalPlayer.Name
        local humanoidRootPart = Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then 
            Fluent:Notify({
                Title = "Error",
                Content = "Character not found",
                Duration = 3
            })
            return 
        end
        
        local originalPosition = humanoidRootPart.CFrame
        local validIDs = {}
        
        -- Find all enabled ID SurfaceGuis
        local Map = workspace:FindFirstChild("Map")
        if Map then
            for _, obj in ipairs(Map:GetDescendants()) do
                if obj:IsA("SurfaceGui") and obj.Enabled and obj.Parent.Name == "Id" then
                    local prompt = obj.Parent:FindFirstChild("IdPrompt")
                    if prompt and prompt:GetAttribute("PlayerName") == playerName then
                        table.insert(validIDs, {
                            id = obj.Parent,
                            position = obj.Parent.Position,
                            surfaceGui = obj
                        })
                    end
                end
            end
        end
        
        if #validIDs == 0 then
            Fluent:Notify({
                Title = "ID Not Found",
                Content = "Could not find your active ID",
                Duration = 3
            })
            humanoidRootPart.CFrame = originalPosition
            return
        end
        
        -- Sort by most recent (highest Y position)
        table.sort(validIDs, function(a, b)
            return a.position.Y > b.position.Y
        end)
        
        -- Get the surface normal and calculate position
        local id = validIDs[1].id
        local surfaceGui = validIDs[1].surfaceGui
        local normal = surfaceGui.Face.Name == "Front" and id.CFrame.LookVector or -id.CFrame.LookVector
        
        -- Position 5 studs in front of the surface
        local targetPos = id.Position + (normal * 5)
        local targetCF = CFrame.new(targetPos, id.Position)
        
        humanoidRootPart.CFrame = targetCF
        Fluent:Notify({
            Title = "Success",
            Content = "Teleported to your active ID",
            Duration = 3
        })
    end
})

-- Add ESP update handlers
Options.AllIDsESP:OnChanged(updateIDESP)
Options.YourIDESP:OnChanged(updateIDESP)

-- Add updates for intermission/round changes
game.Players.LocalPlayer.PlayerGui.ChildAdded:Connect(function(child)
    if child.Name == "GameUI" then
        task.wait(1) -- Wait for round to properly start
        updateIDESP()
    end
end)

-- Update ESP periodically
RunService.Heartbeat:Connect(function()
    if Options.AllIDsESP.Value or Options.YourIDESP.Value then
        task.wait(1) -- Update every second
        updateIDESP()
    end
end)

-- Kira Detection Function
local function updateKiraList(player)
    local gameUI = Players.LocalPlayer:FindFirstChild("GameUI")
    if gameUI then
        local titleLabel = gameUI.TopFrame.GPTitle.TextLabel
        if titleLabel and titleLabel.Text == "INTERMISSION" then
            return
        end
    end

    local kiraName = player.Name .. " (" .. player.DisplayName .. ")"
    local values = kiraList.Values or {}
    
    for _, value in ipairs(values) do
        if value == kiraName then
            return
        end
    end
    
    table.insert(values, kiraName)
    print("Adding Kira to list:", kiraName)
    kiraList:SetValues(values)
end

-- Player handling
local function setupCharacterMonitoring(player, character)
    if Options.ESPEnabled.Value then
        createESP(player)
        if Options.ESPDisplayName.Value then
            createBillboard(player)
        end
    end

    -- Monitor for DeathNoteBook
    local function checkForDeathNoteBook()
        local deathNote = character:FindFirstChild("DeathNoteBook")
        if deathNote then
            Fluent:Notify({
                Title = "Kira Notifier",
                Content = player.Name .. " (" .. player.DisplayName .. ") has a DeathNoteBook.",
                Duration = 10
            })
            updateKiraList(player)
        end
    end

    checkForDeathNoteBook()
    
    character.ChildAdded:Connect(function(child)
        if child.Name == "DeathNoteBook" then
            Fluent:Notify({
                Title = "Kira Notifier",
                Content = player.Name .. " (" .. player.DisplayName .. ") has a DeathNoteBook.",
                Duration = 10
            })
            updateKiraList(player)
        end
    end)
end

local function onPlayerAdded(player)
    if player.Character then
        setupCharacterMonitoring(player, player.Character)
    end
    
    player.CharacterAdded:Connect(function(character)
        wait(1) -- Wait for character to load
        setupCharacterMonitoring(player, character)
    end)
end

-- Initialize players
Players.PlayerAdded:Connect(onPlayerAdded)
for _, player in pairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

-- Initialize XRay
setupXRayMonitoring()

-- ESP Callbacks
Options.ESPEnabled:OnChanged(function()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            if Options.ESPEnabled.Value then
                createESP(player)
                if Options.ESPDisplayName.Value then
                    createBillboard(player)
                end
            else
                local highlight = player.Character:FindFirstChild("ESPHighlight")
                if highlight then highlight:Destroy() end
                local billboard = player.Character:FindFirstChild("ESPBillboard")
                if billboard then billboard:Destroy() end
            end
        end
    end
end)

Options.ESPColor:OnChanged(function()
    if Options.ESPEnabled.Value then
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                local highlight = player.Character:FindFirstChild("ESPHighlight")
                if highlight then
                    highlight.FillColor = Options.ESPColor.Value
                    highlight.OutlineColor = Options.ESPColor.Value
                end
            end
        end
    end
end)

Options.ESPFillTransparency:OnChanged(function()
    if Options.ESPEnabled.Value then
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                local highlight = player.Character:FindFirstChild("ESPHighlight")
                if highlight then
                    highlight.FillTransparency = Options.ESPFillTransparency.Value
                end
            end
        end
    end
end)

Options.ESPOutlineTransparency:OnChanged(function()
    if Options.ESPEnabled.Value then
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                local highlight = player.Character:FindFirstChild("ESPHighlight")
                if highlight then
                    highlight.OutlineTransparency = Options.ESPOutlineTransparency.Value
                end
            end
        end
    end
end)

Options.ESPDisplayName:OnChanged(function()
    if Options.ESPEnabled.Value then
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                if Options.ESPDisplayName.Value then
                    createBillboard(player)
                else
                    local billboard = player.Character:FindFirstChild("ESPBillboard")
                    if billboard then billboard:Destroy() end
                end
            end
        end
    end
end)

Options.ESPTextColor:OnChanged(function()
    if Options.ESPEnabled.Value then
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                local billboard = player.Character:FindFirstChild("ESPBillboard")
                if billboard then
                    local textLabel = billboard:FindFirstChildOfClass("TextLabel")
                    if textLabel then
                        textLabel.TextColor3 = Options.ESPTextColor.Value
                    end
                end
            end
        end
    end
end)

Options.ESPTextSize:OnChanged(function()
    if Options.ESPEnabled.Value then
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character then
                local billboard = player.Character:FindFirstChild("ESPBillboard")
                if billboard then
                    local textLabel = billboard:FindFirstChildOfClass("TextLabel")
                    if textLabel then
                        textLabel.TextSize = Options.ESPTextSize.Value
                    end
                end
            end
        end
    end
end)

Options.XRayEnabled:OnChanged(function()
    setXRay(Options.XRayEnabled.Value)
end)

Options.XRayTransparency:OnChanged(function()
    if Options.XRayEnabled.Value then
        setXRay(true)
    end
end)

-- Add at the end of the file, before SaveManager:LoadAutoloadConfig()
-- Other Features Tab Elements
local FullBright = Tabs.OtherFeatures:AddToggle("FullBright", {
    Title = "Full Bright",
    Default = false
})

local SpectatePlayer = Tabs.OtherFeatures:AddDropdown("SpectatePlayer", {
    Title = "Spectate Player",
    Values = {},
    Multi = false,
    Default = nil
})

local UnspectateButton = Tabs.OtherFeatures:AddButton({
    Title = "Unspectate",
    Description = "Return to your camera view",
    Callback = function()
        if Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            workspace.CurrentCamera.CameraSubject = Players.LocalPlayer.Character.Humanoid
            SpectatePlayer:SetValue(nil)
        end
    end
})

local ShowApples = Tabs.OtherFeatures:AddToggle("ShowApples", {
    Title = "Show Player Apples",
    Default = false
})

-- Full Bright optimization
local defaultLighting = {
    ambient = Lighting.Ambient,
    outdoorAmbient = Lighting.OutdoorAmbient,
    brightness = Lighting.Brightness
}

Options.FullBright:OnChanged(function()
    if Options.FullBright.Value then
        Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
        Lighting.Brightness = 2
    else
        Lighting.Ambient = defaultLighting.ambient
        Lighting.OutdoorAmbient = defaultLighting.outdoorAmbient
        Lighting.Brightness = defaultLighting.brightness
    end
end)

-- Spectate Function
local function updateSpectateList()
    local playerList = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            table.insert(playerList, player.Name .. " (" .. player.DisplayName .. ")")
        end
    end
    SpectatePlayer:SetValues(playerList)
end

SpectatePlayer:OnChanged(function()
    local selectedName = SpectatePlayer.Value
    if selectedName then
        local playerName = selectedName:match("^([^(]+)"):gsub("%s+$", "")
        local selectedPlayer = Players:FindFirstChild(playerName)
        if selectedPlayer and selectedPlayer.Character then
            workspace.CurrentCamera.CameraSubject = selectedPlayer.Character.Humanoid
        end
    else
        workspace.CurrentCamera.CameraSubject = Players.LocalPlayer.Character.Humanoid
    end
end)

Players.PlayerAdded:Connect(function(player)
    if Options.ShowApples.Value then
        player.CharacterAdded:Connect(function(character)
            character:WaitForChild("Head")
            task.wait(1)
            createAppleLabel(player)
        end)
    end
    updateSpectateList()
end)

Players.PlayerRemoving:Connect(function(player)
    if appleLabels[player.Name] then
        appleLabels[player.Name]:Destroy()
        appleLabels[player.Name] = nil
    end
    updateSpectateList()
end)

-- Apple Count Viewer
local appleLabels = {}

local function createAppleLabel(player)
    -- Remove existing label if any
    if appleLabels[player.Name] then
        appleLabels[player.Name]:Destroy()
    end
    
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "AppleCounter"
    billboardGui.Size = UDim2.new(0, 200, 0, 50)
    billboardGui.StudsOffset = Vector3.new(0, 4, 0)
    billboardGui.AlwaysOnTop = true
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Parent = billboardGui
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextScaled = false
    textLabel.TextSize = 14
    textLabel.Font = Enum.Font.GothamBold
    textLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
    
    -- Update apple count
    local function updateCount()
        local dataFolder = game.ReplicatedStorage:FindFirstChild("Data_Folder")
        if dataFolder then
            local playerData = dataFolder:FindFirstChild(player.Name.."_Data")
            if playerData then
                local stats = playerData:FindFirstChild("Stats")
                if stats then
                    local money = stats:FindFirstChild("Money")
                    if money then
                        textLabel.Text = "Apples: " .. money.Value
                    end
                end
            end
        end
    end
    
    updateCount()
    billboardGui.Parent = player.Character.Head
    appleLabels[player.Name] = billboardGui
    
    -- Update count every second
    spawn(function()
        while billboardGui and billboardGui.Parent and Options.ShowApples.Value do
            updateCount()
            task.wait(1)
        end
    end)
end

Options.ShowApples:OnChanged(function()
    if Options.ShowApples.Value then
        for _, player in pairs(Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("Head") then
                createAppleLabel(player)
            end
        end
    else
        for _, label in pairs(appleLabels) do
            if label then label:Destroy() end
        end
        appleLabels = {}
    end
end)

-- Add after the ShowApples toggle in Other Features tab
local ChatCrash = Tabs.OtherFeatures:AddButton({
    Title = "Chat Clear FE",
    Description = "Attempts to clear chat with special message", 
    Callback = function()
        if game:GetService("TextChatService").ChatVersion == Enum.ChatVersion.TextChatService then
            game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync("hi\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r.")
            Fluent:Notify({
                Title = "Chat Clear FE",
                Content = "Clearing message sent successfully",
                Duration = 3
            })
        else
            Fluent:Notify({
                Title = "Not Supported",
                Content = "This game has the legacy chat. The crash only works with new chat version.",
                Duration = 5
            })
        end
    end
})

-- Add after your existing Other Features Tab Elements
local WalkSpeedSlider = Tabs.OtherFeatures:AddSlider("WalkSpeed", {
    Title = "Walk Speed",
    Description = "Changes your character's walking speed",
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 0,
    Callback = function(Value)
        if Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            Players.LocalPlayer.Character.Humanoid.WalkSpeed = Value
        end
    end
})

local JumpPowerSlider = Tabs.OtherFeatures:AddSlider("JumpPower", {
    Title = "Jump Power",
    Description = "Changes your character's jumping power",
    Default = 50,
    Min = 50,
    Max = 300,
    Rounding = 0,
    Callback = function(Value)
        if Players.LocalPlayer.Character and Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            Players.LocalPlayer.Character.Humanoid.JumpPower = Value
        end
    end
})

-- Add character monitoring to update values when character respawns
Players.LocalPlayer.CharacterAdded:Connect(function(character)
    local humanoid = character:WaitForChild("Humanoid")
    if humanoid then
        humanoid.WalkSpeed = WalkSpeedSlider.Value
        humanoid.JumpPower = JumpPowerSlider.Value
    end
end)

-- Initialize player lists
updateSpectateList()

-- Update lists when players join/leave
Players.PlayerAdded:Connect(function()
    updatePlayerList()
    updatePlayerAppleList()
end)

Players.PlayerRemoving:Connect(function()
    updatePlayerList()
    updatePlayerAppleList()
end)

Window:SelectTab(1)
SaveManager:LoadAutoloadConfig()
